package is.hi.hbv501GEfnahagsspa.Controllers;


import is.hi.hbv501GEfnahagsspa.Entities.Forecast;
import is.hi.hbv501GEfnahagsspa.Entities.User;
import is.hi.hbv501GEfnahagsspa.Services.ForecastGeneratorService;
import is.hi.hbv501GEfnahagsspa.Services.ForecastService;
import is.hi.hbv501GEfnahagsspa.Services.UserService;
import org.jfree.chart.JFreeChart;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.imageio.ImageIO;
import javax.servlet.http.HttpSession;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Base64;
import java.util.HashMap;
import java.util.Map;

@Controller
public class ForecastController {
/*
    ForecastController.java
    Controller for all interactions and requests related to the Forecast entity.
    Handles requests to view forecasts from database, deleting forecasts, generating
    new forecasts and updating older ones.

    List of methods
        - forecastList: Directs to listforecasts.html which displays forecasts previously
                        generated by user
        - getForecast: Displays specific forecast in viewforecast.html when requested
                       by user in listforecasts.html
        - deleteForecast: Deletes specific forecast when deletion requested by user
                          in listforecasts.html
        - updateForecast: Updates forecast being displayed in view using the most
                          recent data available.
        - updateForecastById: Updates specific forecast when update requested by user
                              in listforecasts.html
        - generateForecast: Generates new forecast using parameters submitted by user
        - forecastResult: Displays specific series from forecast in tabs when viewing
                          forecasts in viewforecast.html
*/

    @Autowired
    private ForecastService forecastService;
    @Autowired
    private UserService userService;

    // Lookup table with information on Icelandic series names.
    // This is needed since the R engine won't accept variables with Icelandic names
    private static final Map<String, String> seriesNameLookup = new HashMap<String, String>();
    {
        seriesNameLookup.put("Mannfjoldi_is","Fjöldi íslenskra ríkisborgara");
        seriesNameLookup.put("Mannfjoldi_erl","Fjöldi erlendra ríkisborgara");
        seriesNameLookup.put("Atvinnul_rvk","Atvinnuleysi í Reykjavík");
        seriesNameLookup.put("Atvinnul_land","Atvinnuleysi");
        seriesNameLookup.put("Einkaneysla","Einkaneysla");
        seriesNameLookup.put("Samneysla","Samneysla");
        seriesNameLookup.put("Fjarmunamyndun","Fjármunamyndun");
        seriesNameLookup.put("Vara_ut","Útflutningur vara");
        seriesNameLookup.put("Vara_inn","Innflutningur vara");
        seriesNameLookup.put("Thjonusta_ut","Útflutningur þjónustu");
        seriesNameLookup.put("Thjonusta_inn","Innflutningur þjónustu");
        seriesNameLookup.put("VLF","Verg landsframleiðsla");
    }

/*
    forecastList
        Use: Catches url query "./listforecasts"
        Parameters: model, Model object
                    session, HttpSession object
        Returns: Return template listforecasts.html populated with key/value pairs from model.
                 model key value pairs are:
                    -"forecasts": List of all forecasts previously generated by logged in user
                    -"username": Username of logged in user
*/
    @RequestMapping(value = "/listforecasts", method = RequestMethod.GET)
    public String forecastsList(Model model, HttpSession session){
        User user = (User) session.getAttribute("activeUser");

        model.addAttribute("forecasts", forecastService.findAllByUser(user));;
        model.addAttribute("username", user.getUsername());
        return "listforecasts";
    }


/*
    getForecast
        Use: Catches url query "./getforecast/{id}"
        Parameters: id, unique id of forecast in database
                    model, Model object
                    session, HttpSession object
        Returns: Template viewforecast.html populated with key/value pairs from model.
                 model key value pairs are:
                    -"forecastName": Name of forecast to be displayed
                    -"forecastTime": The time when forecast to be displayed was originally generated
                    -"seriesNames": List with names of series in forecast
                    -"username": Username of logged in user.
*/
    @RequestMapping(value = "/getforecast/{id}", method = RequestMethod.GET)
    public String getForecast(@PathVariable(value = "id") long id,
                              Model model,
                              HttpSession session){
        // Gets forecast from forecast Id and adds it to session as the activeForecast
        Forecast forecast = (Forecast) forecastService.findById(id);

        session.setAttribute("activeForecast", forecast);

        // Adds forecast name and time of generation to model in order to display in view
        model.addAttribute("forecastName", forecast.getForecastName());
        model.addAttribute("forecastTime",forecast.getGeneratedTime());

        // Adds seriesNames to model in order to generate tabs
        String[] names = new String[forecast.getForecastResults().size()];
        for(int i = 0; i < names.length; i++) {
            names[i] = seriesNameLookup.get(forecast.getForecastResults().get(i).getName());
        }
        model.addAttribute("seriesNames", names);

        // Gets active user from session
        User user = (User) session.getAttribute("activeUser");
        model.addAttribute("username", user.getUsername());

        return "viewforecast";
    }

/*
    deleteForecast
        Use: Catches url query "./deleteforecast/{id}"
        Parameters: id, unique id of forecast in database
                    model, Model object
                    session, HttpSession object
        Returns: Forecast with id equal to id parameter is deleted from database.
                 Template listforecast.html populated with key/value pairs from model.
                 model key value pairs are:
                    -"forecasts": List of all forecasts previously generated by logged in user
                    -"username": Username of logged in user
*/
    @RequestMapping(value = "/deleteforecast/{id}", method = RequestMethod.GET)
    public String deleteForecast(@PathVariable(value = "id") long id,
                              Model model,
                              HttpSession session){
        // Gets forecast from forecast Id and adds it to session as the activeForecast
        Forecast forecast = (Forecast) forecastService.findById(id);
        forecastService.delete(forecast);

        // Gets active user from session
        User user = (User) session.getAttribute("activeUser");
        model.addAttribute("forecasts", forecastService.findAllByUser(user));;

        return "listforecasts";
    }

    /*
    updateForecast
        Use: Catches url query "./updateforecast"
        Parameters: model, Model object
                    session, HttpSession object
        Returns: If data is successfully retrieved from Hagstofan then forecast currently being
                 viewed in viewforecast.html template is updated with most recent data. Otherwise
                 forecast is unchanged.
                 Template viewforecast.html is then returned populated with key/value pairs from model.
                 model key value pairs are:
                    -"forecastName": Name of forecast to be displayed
                    -"forecastTime": The time when forecast to be displayed was originally generated
                    -"seriesNames": List with names of series in forecast
                    -"username": Username of logged in user.
                    -"errormsg": Error message to be displayed to user
*/
    @RequestMapping(value = "updateforecast", method = RequestMethod.GET)
    public String updateForecast(Model model, HttpSession session)
    {
        // Get active user
        User user = (User) session.getAttribute("activeUser");

        // Load old forecast and retrieve attributes
        Forecast oldForecast = (Forecast) session.getAttribute("activeForecast");
        String name = oldForecast.getForecastName();
        int length = oldForecast.getForecastResults().get(0).getSeries().length;
        String forecastModel = oldForecast.getForecastResults().get(0).getForecastModel();

        String[] seriesNames = new String[oldForecast.getForecastResults().size()];
        for(int i = 0; i < seriesNames.length; i++) {
            seriesNames[i] = oldForecast.getForecastInputs().get(i).getName();
        }

        // Try to update with new data from Hagstofan. If no answer from Hagstofan then
        // return same page plus error message
        try {
            // Generate new forecast with same attributes
            ForecastGeneratorService generatedForecast =
                    new ForecastGeneratorService(name, length, forecastModel, seriesNames);

            Forecast newForecast = new Forecast();
            newForecast.setForecastName(generatedForecast.getForecastName());
            newForecast.setForecastInputs(generatedForecast.getForecastInputs());
            newForecast.setForecastResults(generatedForecast.getForecastResults());
            newForecast.setGeneratedTime(LocalDateTime.now());
            newForecast.setUser(user);

            // Delete old forecast, save new forecast
            forecastService.delete(oldForecast);
            forecastService.save(newForecast);

            // Display new forecast to forecast view

            // Keeps track of forecast being viewed in session
            session.setAttribute("activeForecast", newForecast);

            // Adds forecast name and time of generation to model in order to display in view
            model.addAttribute("forecastName", newForecast.getForecastName());
            model.addAttribute("forecastTime", newForecast.getGeneratedTime());

            // Adds seriesNames to model in order to generate tabs
            for (int i = 0; i < seriesNames.length; i++) {
                seriesNames[i] = seriesNameLookup.get(newForecast.getForecastResults().get(i).getName());
            }
            model.addAttribute("seriesNames", seriesNames);
            model.addAttribute("username", user.getUsername());
            return "viewforecast";
        } catch(Exception e) {

            // Add required attributes to model return viewforecast with added error message

            // Adds forecast name and time of generation to model in order to display in view
            model.addAttribute("forecastName", oldForecast.getForecastName());
            model.addAttribute("forecastTime", oldForecast.getGeneratedTime());

            // Adds seriesNames to model in order to generate tabs
            for (int i = 0; i < seriesNames.length; i++) {
                seriesNames[i] = seriesNameLookup.get(oldForecast.getForecastResults().get(i).getName());
            }

            model.addAttribute("seriesNames", seriesNames);
            model.addAttribute("username", user.getUsername());

            return "viewforecast";
        }
    }

/*
    updateForecastById
        Use: Catches url query "./updateforecast/{id}"
        Parameters: id, unique id of forecast in database
                    model, Model object
                    session, HttpSession object
        Returns: If data is successfully retrieved from Hagstofan then forecast currently being
                 viewed in viewforecast.html template is updated with most recent data. Then
                 template viewforecast.html is returned populated with key/value pairs from model.
                 model key value pairs are:
                    -"forecastName": Name of forecast to be displayed
                    -"forecastTime": The time when forecast to be displayed was originally generated
                    -"seriesNames": List with names of series in forecast
                    -"username": Username of logged in user.
                 Otherwise, if data can not be successfully retrieved, then forecast is unchanged and
                 template listforecasts.html returned populated with key/value pairs from model.
                 model key value pairs are:
                    -"forecasts": List of all forecasts previously generated by logged in user
                    -"username": Username of logged in user
                    -"errormsg": Error message to be displayed to user
*/
    @RequestMapping(value = "updateforecast/{id}", method = RequestMethod.GET)
    public String updateForecastById(@PathVariable(value = "id") long id,
                                     Model model,
                                     HttpSession session)
    {

        // Load old forecast and retrieve attributes
        Forecast oldForecast = forecastService.findById(id);
        String name = oldForecast.getForecastName();
        int length = oldForecast.getForecastResults().get(0).getSeries().length;
        String forecastModel = oldForecast.getForecastResults().get(0).getForecastModel();

        String[] seriesNames = new String[oldForecast.getForecastResults().size()];
        for(int i = 0; i < seriesNames.length; i++) {
            seriesNames[i] = oldForecast.getForecastInputs().get(i).getName();
        }

        // Try to update with new data from Hagstofan. If no answer from Hagstofan then
        // return same page plus error message
        try {
            // Generate new forecast with same attributes
            ForecastGeneratorService generatedForecast =
                    new ForecastGeneratorService(name, length, forecastModel, seriesNames);

            Forecast newForecast = new Forecast();
            newForecast.setForecastName(generatedForecast.getForecastName());
            newForecast.setForecastInputs(generatedForecast.getForecastInputs());
            newForecast.setForecastResults(generatedForecast.getForecastResults());
            newForecast.setGeneratedTime(LocalDateTime.now());
            User user = (User) session.getAttribute("activeUser");
            newForecast.setUser(user);

            // Delete old forecast, save new forecast
            forecastService.delete(oldForecast);
            forecastService.save(newForecast);

            // Display new forecast to forecast view

            // Keeps track of forecast being viewed in session
            session.setAttribute("activeForecast", newForecast);

            // Adds forecast name and time of generation to model in order to display in view
            model.addAttribute("forecastName", newForecast.getForecastName());
            model.addAttribute("forecastTime", newForecast.getGeneratedTime());

            // Adds seriesNames to model in order to generate tabs
            for (int i = 0; i < seriesNames.length; i++) {
                seriesNames[i] = seriesNameLookup.get(newForecast.getForecastResults().get(i).getName());
            }
            model.addAttribute("seriesNames", seriesNames);
            model.addAttribute("username", user.getUsername());

            return "viewforecast";
        } catch(Exception e) {

            // Add required attributes to model return listforecasts with added error message
            User user = (User) session.getAttribute("activeUser");
            model.addAttribute("forecasts", forecastService.findAllByUser(user));;
            model.addAttribute("username", user.getUsername());
            model.addAttribute("errormsg","Ekki náðist samband við Hagstofu, reyndu aftur.");

            return "listforecasts";
        }
    }


/*
    generateForecast
        Use: Catches url query "./forecastgeneration"
        Parameters: name, name of forecast to be generated
                    length, integer in [1..12] specifying length of forecast
                    forecastModel, string describing which model should be used for generation
                    seriesNames, list of inputs from Hagstofan to be used for generation
                    model, Model object
                    session, HttpSession object
        Returns: If data is successfully retrieved from Hagstofan a new forecast will be
                 generated and saved to database. Then the viewforecast.html template is is returned
                 populated with key/value pairs from model.
                 model key value pairs are:
                    -"forecastName": Name of forecast to be displayed
                    -"forecastTime": The time when forecast to be displayed was originally generated
                    -"seriesNames": List with names of series in forecast
                    -"username": Username of logged in user.
                 Otherwise, if data can not be successfully retrieved, then no forecast is generated
                 and user redirected back to forecastgeneration.html and an error message displayed.
                 model key value pairs are:
                    -"forecasts": List of all forecasts previously generated by logged in user
                    -"username": Username of logged in user.
                    -"errormsg": Error message to be displayed to user.
*/
    @RequestMapping(value = "forecastgeneration", method = RequestMethod.POST)
    public String generateForecast(@RequestParam(value = "forecastname") String name,
                                   @RequestParam(value = "length") int length,
                                   @RequestParam(value = "forecastmodel") String forecastModel,
                                   @RequestParam(value = "seriesNames") String[] seriesNames,
                                   Model model,
                                   HttpSession session) {
        // Try to generate forecast with data from Hagstofan. If no answer from Hagstofan then
        // return same page plus error message
        try {
            // Generator service called to build Forecast object
            ForecastGeneratorService generatedForecast =
                    new ForecastGeneratorService(name, length, forecastModel, seriesNames);
            // Forecast entity created and values from ForecastGenerator assigned to it
            Forecast forecast = new Forecast();
            forecast.setForecastName(generatedForecast.getForecastName());
            forecast.setForecastInputs(generatedForecast.getForecastInputs());
            forecast.setForecastResults(generatedForecast.getForecastResults());
            forecast.setGeneratedTime(LocalDateTime.now());


            User user = (User) session.getAttribute("activeUser");
            forecast.setUser(user);

            // Save forecast to database
            forecastService.save(forecast);


            // Keeps track of forecast being viewed in session
            session.setAttribute("activeForecast", forecast);

            // Adds forecast name and time of generation to model in order to display in view
            model.addAttribute("forecastName", forecast.getForecastName());
            model.addAttribute("forecastTime", forecast.getGeneratedTime());

            // Adds seriesNames to model in order to generate tabs
            String[] names = new String[forecast.getForecastResults().size()];
            for (int i = 0; i < names.length; i++) {
                names[i] = seriesNameLookup.get(forecast.getForecastResults().get(i).getName());
            }
            model.addAttribute("seriesNames", names);
            model.addAttribute("username", user.getUsername());

            return "viewforecast";
        } catch(Exception e) {
            model.addAttribute("errormsg","Ekki náðist samband við Hagstofu, reyndu aftur.");
            return "forecastgeneration";
        }
    }

/*
    forecastResult
        Use: Catches url query "./forecastResult/{seriesNumber}"
        Parameters: seriesNumber, index number of series from arrays forecastResults
                                  and forecastInputs in Forecast object.
                    model, Model object
                    session, HttpSession object
        Returns: Template forecastresult.html template populated with key/value pairs from model.
                 model key value pairs are:
                    -"chartImage": Forecast line chart with confidence intervals
                    -"forecastResultSeries": Forecasted values
                    -"forecastResultTime": Forecasted value dates
                    -"forecastInputSeries": Input values
                    -"forecastInputTime": Input value dates
*/
    @RequestMapping(value = "forecastresult/{seriesNumber}", method = RequestMethod.GET)
    public String forecastResult(@PathVariable int seriesNumber,
                                 Model model,
                                 HttpSession session) throws IOException {
        // Get active forecast
        Forecast forecast = (Forecast) session.getAttribute("activeForecast");

        // Draw forecast chart using draw method in Forecast object.
        JFreeChart chart = forecast.drawForecast(forecast.getForecastResults().get(seriesNumber).getName());

        // Convert chart to byte array
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        ImageIO.write(chart.createBufferedImage(1000, 600),"png", baos);
        baos.flush();
        byte[] chartInBytes = baos.toByteArray();
        baos.close();

        // Convert byte array to Base64 and add to model
        model.addAttribute("chartImage", Base64.getEncoder().encodeToString(chartInBytes));

        // Add forecast result and input to model to display in table
        double[] forecastResultSeries = forecast.getForecastResults().get(seriesNumber).getSeries();
        LocalDate[] forecastResultTime = forecast.getForecastResults().get(seriesNumber).getTime();
        double[] forecastInputSeries =  forecast.getForecastInputs().get(seriesNumber).getSeries();
        LocalDate[] forecastInputTime = forecast.getForecastInputs().get(seriesNumber).getTime();
        model.addAttribute("forecastResultSeries", forecastResultSeries);
        model.addAttribute("forecastResultTime", forecastResultTime);
        model.addAttribute("forecastInputSeries", forecastInputSeries);
        model.addAttribute("forecastInputTime", forecastInputTime);

        return "forecastresult";
    }
}
